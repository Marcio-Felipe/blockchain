<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:c="http://java.sun.com/jsp/jstl/core"
      xml:lang="en" lang="en">
<h:head>
    <meta charset="UTF-8"/>
    <title>Conectar à MetaMask</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"/>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #2c3e50; /* Azul-petróleo */
            color: #ecf0f1; /* Cor do texto */
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .container {
            background-color: #34495e; /* Azul mais claro */
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.3);
            text-align: center;
            width: 300px;
        }

        h1 {
            color: #f1c40f; /* Amarelo */
            margin-bottom: 20px;
        }

        h:commandButton {
            background-color: #f1c40f; /* Amarelo */
            color: #2c3e50; /* Azul-petróleo */
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 16px;
            margin: 10px 0; /* Espaçamento entre botões */
        }

        h:commandButton:hover {
            background-color: #e0b10c; /* Amarelo mais escuro */
        }

        button {
            background-color: #f1c40f; /* Amarelo */
            color: #2c3e50; /* Azul-petróleo */
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 16px;
            margin: 10px 0; /* Espaçamento entre botões */
        }

        button:hover {
            background-color: #e0b10c; /* Amarelo mais escuro */
        }

        #message {
            margin-top: 20px;
            color: #ecf0f1; /* Cor do texto */
        }
    </style>
</h:head>
<body>

<script src="https://cdn.jsdelivr.net/npm/web3/dist/web3.min.js"></script>

<div class="container">
    <h1>Conectar à MetaMask</h1>
    <h:form>
        <h:commandButton value="Conectar à MetaMask" onclick="connectMetaMask(); return false;"/>
    </h:form>

    <form>
        <input type="text" id="newName" placeholder="Altere contrato"/>
        <button type="button" onclick="changeName()">Novo Nome</button>
    </form>

    <form>
        <button type="button" onclick="recoverName()">Chamar contrato</button>
    </form>

    <div id="message"></div>
    <div id="changeName"></div>
    <p id="call"></p>

    <div class="form-group">
        <h:form>
            <p:remoteCommand name="getMetamaskAddress"
                             process="@this"
                             actionListener="#{ethereumConnectionBean.captureMetamaskAddress}"/>
            <button id="myButton">Clique Aqui</button>
        </h:form>

        <h:commandButton value="Enviar Transação" action="#{transactionBean.sendTransaction(transactionBean.fromAddress, transactionBean.toAddress, transactionBean.amount)}" />
    </div>

    <h:outputText value="#{ethereumConnectionBean.clientVersion}" style="color: #ecf0f1;"/>
</div>

<script>
    async function connectMetaMask() {
        if (typeof window.ethereum !== 'undefined') {
            try {
                const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});
                document.getElementById('message').textContent = 'Conectado à MetaMask! Conta: ' + accounts[0];
                listenAccountAndNetworkChanges();
            } catch (error) {
                document.getElementById('message').textContent = 'Erro: ' + error.message;
            }
        } else {
            document.getElementById('message').textContent = 'MetaMask não está instalada.';
        }
    }

    function listenAccountAndNetworkChanges() {
        // Detecta mudanças na conta
        window.ethereum.on('accountsChanged', (accounts) => {
            alert('Conta mudada: ' + accounts[0]);
            document.getElementById('message').textContent = 'Conta mudada: ' + accounts[0];
        });

        // Detecta mudanças na rede
        window.ethereum.on('chainChanged', (chainId) => {
            alert('Rede mudada: ' + chainId);
            document.getElementById('message').textContent = 'Rede mudada: ' + chainId;
            window.location.reload(); // Opcional: recarrega a página
        });
    }

    $(document).ready(function () {
        $("#myButton").on("click", async function () {
            try {
                const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});
                getMetamaskAddress([{name: 'address', value: accounts[0]}]);
            } catch (error) {
                document.getElementById('message').textContent = 'Erro: ' + error.message;
            }
        });
    });

    async function changeName() {
        var web3 = new Web3(window.ethereum);
        const abi = [
            {
                "inputs": [],
                "name": "nome",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "string",
                        "name": "_nome",
                        "type": "string"
                    }
                ],
                "name": "mudaNome",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ];

        try {
            const contractAddress = '0x7b9Df156799832a5E120fFb7cd71e59D02499542';
            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
            const contract = new web3.eth.Contract(abi, contractAddress);
            const newName = document.getElementById('newName').value;

            let result = await contract.methods.mudaNome(newName).send({ from: accounts[0] });
            document.getElementById('changeName').innerText = result ? JSON.stringify(result, null, 2) : 'Transação falhou.';
        } catch (error) {
            console.error('Erro ao executar a transação:', error);
            document.getElementById('message').textContent = 'Erro: ' + error.message;
        }
    }

    async function recoverName() {
        var web3 = new Web3(window.ethereum);
        const abi = [
            {
                "inputs": [],
                "name": "nome",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function",
                "constant": true
            },
            {
                "inputs": [
                    {
                        "internalType": "string",
                        "name": "_nome",
                        "type": "string"
                    }
                ],
                "name": "mudaNome",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ];

        const contractAddress = '0x7b9Df156799832a5E120fFb7cd71e59D02499542'; // Substitua pelo endereço do seu contrato
        const contract = new web3.eth.Contract(abi, contractAddress);
        let name = await contract.methods.nome().call();
        document.getElementById('call').innerText = name ? JSON.stringify(name, null, 2) : 'Transação falhou.';
    }
</script>
</body>
</html>
